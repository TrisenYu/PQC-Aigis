/// Last modified at 2025年07月12日 星期六 14时40分24秒

/// Author: <kisfg@hotmail.com, 2025-06>
#include "aigis_const.h"
#include "reduce.h"
#ifndef __AIGIS_NTT_H__
#define __AIGIS_NTT_H__


static const int16_t 
zeta_7681_R[] = {
/*
	order = [
		 1, 129,  65, 193,  33, 161,  97, 225,  17, 145,  81, 209,  49, 177, 113, 241, 
		 9, 137,  73, 201,  41, 169, 105, 233,  25, 153,  89, 217,  57, 185, 121, 249, 
		 5, 133,  69, 197,  37, 165, 101, 229,  21, 149,  85, 213,  53, 181, 117, 245, 
		13, 141,  77, 205,  45, 173, 109, 237,  29, 157,  93, 221,  61, 189, 125, 253, 
		 3, 131,  67, 195,  35, 163,  99, 227,  19, 147,  83, 211,  51, 179, 115, 243, 
		11, 139,  75, 203,  43, 171, 107, 235,  27, 155,  91, 219,  59, 187, 123, 251, 
		 7, 135,  71, 199,  39, 167, 103, 231,  23, 151,  87, 215,  55, 183, 119, 247, 
		15, 143,  79, 207,  47, 175, 111, 239,  31, 159,  95, 223,  63, 191, 127, 255, 
		 2, 130,  66, 194,  34, 162,  98, 226,  18, 146,  82, 210,  50, 178, 114, 242, 
		10, 138,  74, 202,  42, 170, 106, 234,  26, 154,  90, 218,  58, 186, 122, 250, 
		 6, 134,  70, 198,  38, 166, 102, 230,  22, 150,  86, 214,  54, 182, 118, 246, 
		14, 142,  78, 206,  46, 174, 110, 238,  30, 158,  94, 222,  62, 190, 126, 254, 
		 4, 132,  68, 196,  36, 164, 100, 228,  20, 148,  84, 212,  52, 180, 116, 244, 
		12, 140,  76, 204,  44, 172, 108, 236,  28, 156,  92, 220,  60, 188, 124, 252, 
		 8, 136,  72, 200,  40, 168, 104, 232,  24, 152,  88, 216,  56, 184, 120, 248, 
		16, 144,  80, 208,  48, 176, 112, 240,  32, 160,  96, 224,  64, 192, 128, 256
	]
	zeta_7681[i] = pow(62, order[i]-1, 7681)
	zeta.pop(0) # 去除 1
	zeta_7681_R[i] = 2^16 * zeta_7681[i] % 7681
*/
	3777, 4499, 3625, 3985, 6581, 2456, 2194,  121, 5431,  834, 5186, 5362, 2876, 5980, 1414, 2816, 
	5593, 5444, 1986, 6082, 1993, 3706, 5675, 6156, 5124, 1296, 1483, 4851, 3364,  617, 1921, 3992, 
	5943, 3266, 4081,  810, 1887, 7043, 7674, 7243, 7002, 6376, 5921,  396, 4507, 4126, 5800, 3772, 
	5146, 5241, 5126, 1535, 7132, 3153, 2310, 6282, 1321,  514, 4725, 7578, 2804, 5638, 6250, 6627, 
	1698, 4225, 1166, 2426, 3831,  915, 7679, 4264, 7487, 2919, 2789, 3405, 2385, 5568, 4949, 2175, 
	 373, 3692, 6951, 5925, 3135, 5290,  660, 6184, 2572, 4536, 1350, 5457, 4093, 6000, 2883, 6291, 
	1598, 3750, 2762, 2835, 2764, 5448, 3816, 6148, 1464, 6954, 1521, 1386, 4253, 6760, 4938, 5521, 
	2649, 6822, 2579, 1532, 1919, 7195,  404, 6625,  783, 1799, 5016, 3480, 2133, 4371, 6513, 7664, 
	3744, 2422, 2001, 1278,  929, 6333, 5451, 7502, 6439, 5622, 6611, 2161, 1649, 2072, 3177, 5610, 
	1121, 7245,  236,  715,  670, 7023, 6205, 5303, 2767, 3542, 7455, 1203, 1181, 7530, 3887, 1712, 
	7459, 2786, 7230, 4134, 1779, 6530, 7247, 3568, 3988, 3581, 6095, 1509, 2918, 2339, 6274, 3434, 
	4131, 2340, 2891, 2998, 4367, 3461, 4962, 5434, 5092, 1144, 1072, 1295, 4866, 3911, 3450, 3781, 
	5423,  796, 3163, 4473, 7092, 2963, 7557, 3214, 3334, 4315, 3936, 3723, 1931, 7252, 7279, 4273, 
	  83, 6155,  826, 6343, 2345, 5378, 2515, 7039, 5844, 4716, 6890,  370,  293, 3312, 2083, 5992, 
	6904, 2070, 2262, 6788, 2386, 7493, 6162, 4807, 6277, 1012, 2130, 1441, 2532, 4346, 6597, 4338, 
	2937,  509, 6278, 2812, 3763,  592, 2005, 3657, 2460, 4004, 3752,  692, 1669, 2167, 4394
},
/* 
	# 辅助恢复的程序如下
	zeta = [...]
	step, cnt = 0, 0
	stk, tmp = [], []
	for idx, i in enumerate(zeta):
		tmp.append(i)
		if cnt % (2 ** step) == 0:
			step += 1
			cnt = 0
			stk.append(tmp)
			tmp = []
		cnt += 1
	for i in range(len(stk)-1, -1, -1):
		for c in stk[i]:
			print(c, end=', ')
		print()
*/
zeta_7681_inv_R[] = {
	/// 4088 * pow(g, -1, 7681) % 7681
	3287, 5514, 6012, 6989, 3929, 3677, 5221, 4024, 5676, 7089, 3918, 4869, 1403, 7172, 4744, 3343, 
	1084, 3335, 5149, 6240, 5551, 6669, 1404, 2874, 1519,  188, 5295,  893, 5419, 5611,  777, 1689, 
	5598, 4369, 7388, 7311,  791, 2965, 1837,  642, 5166, 2303, 5336, 1338, 6855, 1526, 7598, 3408, 
	 402,  429, 5750, 3958, 3745, 3366, 4347, 4467,  124, 4718,  589, 3208, 4518, 6885, 2258, 3900, 
	4231, 3770, 2815, 6386, 6609, 6537, 2589, 2247, 2719, 4220, 3314, 4683, 4790, 5341, 3550, 4247, 
	1407, 5342, 4763, 6172, 1586, 4100, 3693, 4113,  434, 1151, 5902, 3547,  451, 4895,  222, 5969, 
	3794,  151, 6500, 6478,  226, 4139, 4914, 2378, 1476,  658, 7011, 6966, 7445,  436, 6560, 2071, 
	4504, 5609, 6032, 5520, 1070, 2059, 1242,  179, 2230, 1348, 6752, 6403, 5680, 5259, 3937,   17, 
	1168, 3310, 5548, 4201, 2665, 5882, 6898, 1056, 7277,  486, 5762, 6149, 5102,  859, 5032, 2160, 
	2743,  921, 3428, 6295, 6160,  727, 6217, 1533, 3865, 2233, 4917, 4846, 4919, 3931, 6083, 1390, 
	4798, 1681, 3588, 2224, 6331, 3145, 5109, 1497, 7021, 2391, 4546, 1756,  730, 3989, 7308, 5506, 
	2732, 2113, 5296, 4276, 4892, 4762,  194, 3417,	2, 6766, 3850, 5255, 6515, 3456, 5983, 1054, 
	1431, 2043, 4877,  103, 2956, 7167, 6360, 1399, 5371, 4528,  549, 6146, 2555, 2440, 2535, 3909, 
	1881, 3555, 3174, 7285, 1760, 1305,  679,  438,	7,  638, 5794, 6871, 3600, 4415, 1738, 3689, 
	5760, 7064, 4317, 2830, 6198, 6385, 2557, 1525, 2006, 3975, 5688, 1599, 5695, 2237, 2088, 4865, 
	6267, 1701, 4805, 2319, 2495, 6847, 2250, 7560, 5487, 5225, 1100, 3696, 4056, 3182, 
	/// 256 * pow(4298, -1, 7681) % 7681，利用不在inv_ntt其余层恢复，而最后一层操作可直接保留 2^8。
	5776, 
/*
	/// 2^{15} g^{-1} 给出方式如下：从效果来看会把当前C程序inv_ntt函数中的乘法替换为分支跳转。
	5484, 2757, 3006, 7335, 5805, 5679, 6451, 2012, 2838, 7385, 1959, 6275, 4542, 3586, 2372, 5512, 
	 542, 5508, 6415, 3120, 6616, 7175,  702, 1437, 4600,   94, 6488, 4287, 6550, 6646, 4229, 4685, 
	2799, 6025, 3694, 7496, 4236, 5323, 4759,  321, 2583, 4992, 2668,  669, 7268,  763, 3799, 1704, 
	 201, 4055, 2875, 1979, 5713, 1683, 6014, 6074,   62, 2359, 4135, 1604, 2259, 7283, 1129, 1950, 
	5956, 1885, 5248, 3193, 7145, 7109, 5135, 4964, 5200, 2110, 1657, 6182, 2395, 6511, 1775, 5964, 
	4544, 2671, 6222, 3086,  793, 2050, 5687, 5897,  217, 4416, 2951, 5614, 4066, 6288,  111, 6825, 
	1897, 3916, 3250, 3239,  113, 5910, 2457, 1189,  738,  329, 7346, 3483, 7563,  218, 3280, 4876, 
	2252, 6645, 3016, 2760,  535, 4870,  621, 3930, 1115,  674, 3376, 7042, 2840, 6470, 5809, 3849, 
	 584, 1655, 2774, 5941, 5173, 2941, 3449,  528, 7479,  243, 2881, 6915, 2551, 4270, 2516, 1080, 
	5212, 4301, 1714, 6988, 3080, 4204, 6949, 4607, 5773, 4957, 6299, 2423, 6300, 5806, 6882,  695, 
	2399, 4681, 1794, 1112, 7006, 5413, 6395, 4589, 7351, 5036, 2273,  878,  365, 5835, 3654, 2753, 
	1366, 4897, 2648, 2138, 2446, 2381,   97, 5549,	1, 3383, 1925, 6468, 7098, 1728, 6832,  527, 
	4556, 4862, 6279, 3892, 1478, 7424, 3180, 4540, 6526, 2264, 4115, 3073, 5118, 1220, 5108, 5795, 
	4781, 5618, 1587, 7483,  880, 4493, 4180,  219, 3844,  319, 2897, 7276, 1800, 6048,  869, 5685, 
	2880, 3532, 5999, 1415, 3099, 7033, 5119, 4603, 1003, 5828, 2844, 4640, 6688, 4959, 1044, 6273, 
	6974, 4691, 6243, 5000, 5088, 7264, 1125, 3780, 6584, 6453,  550, 1848, 2028, 1591, 1952
*/
};


void enc_ntt(int16_t a[AIGIS_N]) {
	int64_t level = 7, cnt = 0, step;
	for (; level >= 0; level--) {
		step = 1 << level;
		for (uint64_t st_pos = 0; st_pos < AIGIS_N; st_pos += step << 1) {
			int32_t g = zeta_7681_R[cnt++]; 
			for (uint64_t i = st_pos; i < st_pos + step; i ++) {
				int16_t tmp = enc_mont_reduce(g * a[i+step]);
				a[i+step] = enc_barr_reduce(a[i] - tmp);
				a[i] = enc_barr_reduce(a[i] + tmp);
			}
		}
	}
}

void enc_inv_ntt(int16_t a[AIGIS_N]) {
	int64_t level = 0, cnt = 0, step;
	for (; level < 8; level ++) {
		step = 1 << level;
		for (uint64_t st_pos = 0; st_pos < AIGIS_N; st_pos += step << 1) {
			int32_t g = zeta_7681_inv_R[cnt++];
			for (uint64_t i = st_pos; i < st_pos + step; i++) {
				int16_t tmp = a[i+step];
				a[i+step] = a[i] - tmp;
				a[i] += tmp;
				a[i+step] = enc_mont_reduce(g * a[i+step]);
				/// a[i] = enc_mont_reduce((int32_t)a[i] * AIGIS_ENC_POW_2_15_Q); 
				/*
					2044 = 2 ** 15 mod 7681
					不使用以上采用 2^16/2*g^{-1} 时的写法，
					而想要为少几次乘法的性能优化使用 2^16*g_x^{-1} 和 2^8*g_0^{-1}
					其中 x in {1, 2, 3, 4, 5, 6, 7} 时
					需要按照下面的写法来
				*/
				a[i] =  level ^ 7 ?
						enc_barr_reduce(a[i]) : 
						enc_mont_reduce((int32_t)a[i] << 8);
			}
		}
	}
}




#if (AIGIS_SIG_MOD_Q == 2021377)
static const uint32_t sig_zeta_R[AIGIS_N] = {
	 518470,  697898,  862629, 1367459, 1539276, 1513857, 1662806, 
	 929015, 1757045, 1879015,  449873,   75689, 1125711, 1680345,  620849, 
	 769419,  486664, 1389778,  658915, 1319993,   73499, 1391732, 1199964, 
	 291970,  655587,  966181,  128755,  288564,   10420, 1980158, 1011904, 
	1937906,  838813,  854780, 1453936, 1704819, 1740984,   86645, 1360044, 
	 115556, 1570480, 1655800,  272433, 1245520, 1190005,  238406, 1726139, 
	1013693, 1948648, 1020399, 1544116, 1120075,  656153,  591869, 1620799, 
	 275832,  517427, 1601944, 1555925, 1293833, 1705829, 1357642,  142050, 
	 739420, 1568070, 1535360,  740638,   57925, 1038012,   65439, 1844105, 
	 673379, 1768997,  924638, 1986117, 1394208, 1277276,  129269, 1760277, 
	1173604, 1161770, 1897168,  807697,  965038, 1876057, 1963820, 1794916, 
	 924093,  251419,  168030, 1073286, 1902394,  347156, 1488477,  511116, 
	 572755, 1686880,  268077,   53223, 1268228,  579769, 1043786,  272581, 
	1574784, 1729984,  568576,  276296, 1095755,  282107,  158374,  915466, 
	1569380,  908136,  972609,  923797,  466409, 1762448,  798650,  436051, 
	1275685, 1122838,	1862, 1854194, 1432015, 1507507, 1452715, 1170924, 
	// 往下是 generator * zeta_R[i-128];
	 137295,  531590,  556763, 1442250,  896280,  320184,  333460, 1993546, 
	 622613, 1352919,  881664, 1176558, 1936677, 2011958, 1357750,  534023, 
	 142791,   40293,  638104, 1519860, 1189220, 1763667,  792470, 1813814, 
	 830483, 1256948, 1537350,   64760,  561409,  823180,  786453, 1106713, 
	1491299, 1582163,  822179, 1663832, 1269819,   84100,  780824,  310495, 
	1043416,  763923, 1440072, 1308437, 1369984, 1027053,  641681,  932722, 
	1248044,  318540, 1777818,  702544, 1566714, 1301662,  265980,  696370, 
	1576958,  449193, 1228202, 1635455, 1143957, 1349609,  120737, 1115065, 
	1815624,  573533,   10820, 1911846,  533321, 1147868, 1126927,  145151, 
	 641139,  275750,  276830, 1257214,  988074, 1857331,  105366, 1608247, 
	1752751,  817865,  294374, 1145376, 1447053,  647982, 1517128,  301974, 
	 233775, 1669708, 1146108, 1913137,  707228, 1147423,  349817, 1972001, 
	 777351, 1874015,  964313,  161863, 1142539, 1331457, 1604014, 1320129, 
	1103939, 1236477,  447210, 1613614, 1666811,   51306,  383284, 1573619, 
	 677023,  994549,   23785,  210391,  461525, 1779756,  430663,   84620, 
	1731642, 1784991,  147098,  942182, 1953450, 1853187, 1567373, 1541031
};
// 似乎最后一层的单位根多乘了2^32次方。
static const uint32_t sig_zeta_inv_R[AIGIS_N] = {
	 480346,  454004,  168190,   67927, 1079195, 1874279,  236386,  289735, 
	1936757, 1590714,  241621, 1559852, 1810986, 1997592, 1026828, 1344354, 
	 447758, 1638093, 1970071,  354566,  407763, 1574167,  784900,  917438, 
	 701248,  417363,  689920,  878838, 1859514, 1057064,  147362, 1244026, 
	  49376, 1671560,  873954, 1314149,  108240,  875269,  351669, 1787602, 
	1719403,  504249, 1373395,  574324,  876001, 1727003, 1203512,  268626, 
	 413130, 1916011,  164046, 1033303,  764163, 1744547, 1745627, 1380238, 
	1876226,  894450,  873509, 1488056,  109531, 2010557, 1447844,  205753, 
	 906312, 1900640,  671768,  877420,  385922,  793175, 1572184,  444419, 
	1325007, 1755397,  719715,  454663, 1318833,  243559, 1702837,  773333, 
	1088655, 1379696,  994324,  651393,  712940,  581305, 1257454,  977961, 
	1710882, 1240553, 1937277,  751558,  357545, 1199198,  439214,  530078, 
	 914664, 1234924, 1198197, 1459968, 1956617,  484027,  764429, 1190894, 
	 207563, 1228907,  257710,  832157,  501517, 1383273, 1981084, 1878586, 
	1487354,  663627,	9419,   84700,  844819, 1139713,  668458, 1398764, 
	  27831, 1687917, 1701193, 1125097,  579127, 1464614, 1489787, 1884082, 
	 850453,  568662,  513870,  589362,  167183, 2019515,  898539,  745692, 
	1585326, 1222727,  258929, 1554968, 1097580, 1048768, 1113241,  451997, 
	1105911, 1863003, 1739270,  925622, 1745081, 1452801,  291393,  446593, 
	1748796,  977591, 1441608,  753149, 1968154, 1753300,  334497, 1448622, 
	1510261,  532900, 1674221,  118983,  948091, 1853347, 1769958, 1097284, 
	 226461,   57557,  145320, 1056339, 1213680,  124209,  859607,  847773, 
	 261100, 1892108,  744101,  627169,   35260, 1096739,  252380, 1347998, 
	 177272, 1955938,  983365, 1963452, 1280739,  486017,  453307, 1281957, 
	1879327,  663735,  315548,  727544,  465452,  419433, 1503950, 1745545, 
	 400578, 1429508, 1365224,  901302,  477261, 1000978,   72729, 1007684, 
	 295238, 1782971,  831372,  775857, 1748944,  365577,  450897, 1905821, 
	 661333, 1934732,  280393,  316558,  567441, 1166597, 1182564,   83471, 
	1009473,   41219, 2010957, 1732813, 1892622, 1055196, 1365790, 1729407, 
	 821413,  629645, 1947878,  701384, 1362462,  631599, 1534713, 1251958, 
	1400528,  341032,  895666, 1945688, 1571504,  142362,  264332, 1092362, 
	 358571,  507520,  482101,  653918, 1158748, 1323479, 
	// 原先为：1331599
	// 1331599
	550695
};

#elif (AIGIS_SIG_MOD_Q == 3870721)
static const uint32_t sig_zeta_R[AIGIS_N] = {
	2505409,  267692,  529914,  420735,  181988, 2608440, 3865338, 
	3665767,  288746, 2524026, 3008396,  901579,   70491, 1821213, 1437514, 
	3375394,  502705, 3475623, 3513653, 1833017, 3651222,  947790, 1966036, 
	2704588, 2850143, 3030905, 1622520, 3210245, 3127826,  292206, 3096784, 
	3201921, 3867412, 1705316, 2917474, 2975359, 2004421, 2812268,  890313, 
	2511631, 3623292, 2803099, 2903766, 1596209, 2040136, 3468632, 2156661, 
	2913824, 2560388, 1214035, 3468039,  575792, 2926910, 3407464, 2292204, 
	2285761, 2338667,   63216, 3835938, 3204529, 1818443, 3786633, 3241498, 
	 944328,  616348, 2927622,   64038, 1171534, 1361903, 2827360, 3144828, 
	2738981, 1714811, 3625146,   89505, 2787809, 2363190, 2513795, 3306399, 
	1418851, 1206903,  926563,  211044,  466372, 3410093, 1353383, 3610570, 
	 934100, 2471859, 2037600, 2996463, 1698492,  525418, 1662944, 1981925, 
	1210222, 1813802,  314420, 2466015, 3516872, 3320431, 1355971, 1500137, 
	 493991,   36365, 3235243,  214827, 2544017, 1739057,  945221, 1038283, 
	2889903, 3364214, 1674857, 1434035, 1665177, 2651227, 1575769, 1155464, 
	 467835, 1713031, 2041544,  408424,  137443, 2029527, 2115209, 2293884, 
	// 往下是 generator * zeta_R[i-128] % ;
	2137416, 3189891, 2471629, 2229785, 2611740, 2394735, 2287191, 2862622, 
	 300090, 1004990,  401830,  143957, 2910193, 3787906, 3628164, 3171269, 
	2239135, 3038465,  601725, 2887353, 2766912, 1622354, 2989501, 1339396, 
	1939160, 2386893,  103181, 2793304,  911193, 3295333, 3025653, 2513246, 
	 314427,  939239,   57676, 2293294, 2833811, 2842292, 3139575, 2705158, 
	1290463, 3780876, 1462003,  668827, 1850975, 2327221, 2910099, 2724881, 
	 418972,  957090,  321362, 2898276, 3523069, 1463158, 3818473,  453440, 
	1891547, 1601731,  529312, 3301251, 1117070, 3520718,  634170, 1958581, 
	 929634, 1133255, 3807619, 1159272, 3292496, 3530590,  927442, 3686531, 
	2605292,  384058, 1415774, 1040397, 3663661, 2332173, 1131260,  680774, 
	1186917, 3736575, 1064994, 2954460, 3051663, 1162037, 2962553, 2130376, 
	1717870, 3565361, 2935922, 2347272, 1768863, 3125776, 1686747, 3137894, 
	2993356, 1574419, 1073008, 1262182,  183934,  914847, 3373156, 3688758, 
	2538361,  614066, 3211143, 3565127, 1322591, 3426188, 2951336,  172348, 
	3747492, 3719872, 2962113,  778168, 2880082, 1051508, 3741079, 1816757, 
	 763621,  328987, 2831790, 1276220,  135870, 3388537, 3034187, 2419032
};
static const uint32_t sig_zeta_inv_R[AIGIS_N] = {
	1451689,  836534,  482184, 3734851, 2594501, 1038931, 3541734, 3107100, 
	2053964,  129642, 2819213,  990639, 3092553,  908608,  150849,  123229, 
	3698373,  919385,  444533, 2548130,  305594,  659578, 3256655, 1332360, 
	 181963,  497565, 2955874, 3686787, 2608539, 2797713, 2296302,  877365, 
	 732827, 2183974,  744945, 2101858, 1523449,  934799,  305360, 2152851, 
	1740345,  908168, 2708684,  819058,  916261, 2805727,  134146, 2683804, 
	3189947, 2739461, 1538548,  207060, 2830324, 2454947, 3486663, 1265429, 
	 184190, 2943279,  340131,  578225, 2711449,   63102, 2737466, 2941087, 
	1912140, 3236551,  350003, 2753651,  569470, 3341409, 2268990, 1979174, 
	3417281,   52248, 2407563,  347652,  972445, 3549359, 2913631, 3451749, 
	1145840,  960622, 1543500, 2019746, 3201894, 2408718,   89845, 2580258, 
	1165563,  731146, 1028429, 1036910, 1577427, 3813045, 2931482, 3556294, 
	1357475,  845068,  575388, 2959528, 1077417, 3767540, 1483828, 1931561, 
	2531325,  881220, 2248367, 1103809,  983368, 3268996,  832256, 1631586, 
	 699452,  242557,   82815,  960528, 3726764, 3468891, 2865731, 3570631, 
	1008099, 1583530, 1475986, 1258981, 1640936, 1399092,  680830, 1733305, 
	1576837, 1755512, 1841194, 3733278, 3462297, 1829177, 2157690, 3402886, 
	2715257, 2294952, 1219494, 2205544, 2436686, 2195864,  506507,  980818, 
	2832438, 2925500, 2131664, 1326704, 3655894,  635478, 3834356, 3376730, 
	2370584, 2514750,  550290,  353849, 1404706, 3556301, 2056919, 2660499, 
	1888796, 2207777, 3345303, 2172229,  874258, 1833121, 1398862, 2936621, 
	 260151, 2517338,  460628, 3404349, 3659677, 2944158, 2663818, 2451870, 
	 564322, 1356926, 1507531, 1082912, 3781216,  245575, 2155910, 1131740, 
	 725893, 1043361, 2508818, 2699187, 3806683,  943099, 3254373, 2926393, 
	 629223,   84088, 2052278,  666192,   34783, 3807505, 1532054, 1584960, 
	1578517,  463257,  943811, 3294929,  402682, 2656686, 1310333,  956897, 
	1714060,  402089, 1830585, 2274512,  966955, 1067622,  247429, 1359090, 
	2980408, 1058453, 1866300,  895362,  953247, 2165405,	3309,  668800, 
	 773937, 3578515,  742895,  660476, 2248201,  839816, 1020578, 1166133, 
	1904685, 2922931,  219499, 2037704,  357068,  395098, 3368016,  495327, 
	2433207, 2049508, 3800230, 2969142,  862325, 1346695, 3581975,  204954, 
	   5383, 1262281, 3688733, 3449986, 3340807, 3603029,  
	// 原先为：951197 
	// 951197
	2908374
	
};
#else
	#error "invalid configuration upon AIGIS_SIG_MOD_Q!"
#endif // check for AIGIS_SIG_MOD_Q


void sig_ntt(uint32_t a[AIGIS_N]) {
	uint64_t step = AIGIS_N >> 1, cnt = 0, st_pos;
	for (; step; step >>= 1) {
		for (st_pos = 0; st_pos < AIGIS_N; st_pos += step << 1) {
			uint64_t zeta = sig_zeta_R[cnt++];
			for (uint64_t i = st_pos; i < st_pos + step; i ++) {
				uint32_t tmp = sig_mont_reduce(zeta * a[i+step]);
				a[i+step] = a[i] + (AIGIS_SIG_MOD_Q << 1) - tmp;
				a[i] += tmp;
			}
		}
	}
}

void sig_inv_ntt(uint32_t a[AIGIS_N]) {
	uint64_t step = 1, cnt = 0, st_pos;
	for (; step < AIGIS_N; step <<= 1) {
		for (st_pos = 0; st_pos < AIGIS_N; st_pos += step << 1) {
			uint64_t zeta = sig_zeta_inv_R[cnt++];
			for (uint64_t i = st_pos; i < st_pos + step; i ++) {
				uint32_t tmp = a[i];
				a[i] = sig_barr_reduce(tmp + a[i+step]);
				tmp += (AIGIS_SIG_MOD_Q<<9) - a[i + step];
				a[i+step] = sig_mont_reduce(zeta * tmp);
			}
		}
	}
	// 原先用2^56是因为32+24=56.
	// 上一步做完还一直有2^8，所以总共是2^64 mod q
	// 在下一步的循环内减少2^32，那么在结果上看
	// 最终得到2^32*a[i] (mod q)
	// 可直接用于后续的mont_reduce上

	for (step = 0; step < AIGIS_N >> 1; step ++) {
		// 如法炮制不多阐述
		a[step] = sig_mont_reduce(AIGIS_SIG_POW_2_24_Q * a[step]);
	}
}
#endif // AIGIS_NTT_H
